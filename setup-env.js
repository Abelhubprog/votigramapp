/**
 * Votigram Environment Setup Helper
 * 
 * This script helps you set up your environment variables for the Votigram landing page.
 * It creates a .env file based on your inputs without hardcoding sensitive information.
 * 
 * Usage: 
 * - Run with: node setup-env.js
 * - Follow the prompts to enter your MongoDB credentials
 * - The script will create a .env file with your settings
 */

const fs = require('fs');
const readline = require('readline');

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Questions to ask
const questions = [
  {
    name: 'MONGODB_USERNAME',
    question: 'Enter your MongoDB username (default: "abelngeno1"): ',
    default: 'abelngeno1'
  },
  {
    name: 'MONGODB_PASSWORD',
    question: 'Enter your MongoDB password: ',
    isRequired: true,
    isSensitive: true
  },
  {
    name: 'MONGODB_CLUSTER',
    question: 'Enter your MongoDB cluster (default: "cluster0.1hqxdjk"): ',
    default: 'cluster0.1hqxdjk'
  },
  {
    name: 'DB_NAME',
    question: 'Enter your database name (default: "votigram"): ',
    default: 'votigram'
  },
  {
    name: 'WAITLIST_COLLECTION',
    question: 'Enter your waitlist collection name (default: "waitlist"): ',
    default: 'waitlist'
  },
  {
    name: 'ADMIN_API_KEY',
    question: 'Enter your admin API key (leave blank to generate a secure one): ',
    generateDefault: () => Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)
  },
  // Email configuration questions
  {
    name: 'EMAIL_HOST',
    question: 'Enter your SMTP email host (e.g., smtp.gmail.com): ',
    isRequired: true
  },
  {
    name: 'EMAIL_PORT',
    question: 'Enter your SMTP email port (e.g., 465 for secure, 587 for TLS): ',
    default: '465'
  },
  {
    name: 'EMAIL_SECURE',
    question: 'Is the connection secure (true/false, usually true for port 465)? ',
    default: 'true'
  },
  {
    name: 'EMAIL_USER',
    question: 'Enter your email username (the email address you send from): ',
    isRequired: true
  },
  {
    name: 'EMAIL_PASS',
    question: 'Enter your email password (or app-specific password): ',
    isRequired: true,
    isSensitive: true
  }
];

// Store answers
const answers = {};

// Ask questions sequentially
function askQuestion(index) {
  if (index >= questions.length) {
    generateEnvFile();
    return;
  }

  const q = questions[index];
  
  rl.question(q.question, (answer) => {
    // Handle required fields
    if (q.isRequired && !answer) {
      console.log('\x1b[31m%s\x1b[0m', 'This field is required. Please try again.');
      return askQuestion(index);
    }
    
    // Use default if no answer provided
    if (!answer && q.default) {
      answers[q.name] = q.default;
      console.log(`Using default: ${q.isSensitive ? '*****' : q.default}`);
    } 
    // Generate a default if specified
    else if (!answer && q.generateDefault) {
      answers[q.name] = q.generateDefault();
      console.log(`Generated: ${q.isSensitive ? '*****' : answers[q.name]}`);
    }
    // Otherwise use the provided answer
    else {
      answers[q.name] = answer;
      if (q.isSensitive) {
        console.log('Saved securely.');
      }
    }
    
    askQuestion(index + 1);
  });
}

// Generate the .env file from answers
function generateEnvFile() {
  // URL encode the password to handle special characters like @ properly
  const encodedPassword = encodeURIComponent(answers.MONGODB_PASSWORD);
  const encodedEmailPass = encodeURIComponent(answers.EMAIL_PASS);
  
  const envContent = `# Database configuration
MONGODB_URI=mongodb+srv://${answers.MONGODB_USERNAME}:${encodedPassword}@${answers.MONGODB_CLUSTER}.mongodb.net/${answers.DB_NAME}?retryWrites=true&w=majority
DB_NAME=${answers.DB_NAME}
WAITLIST_COLLECTION=${answers.WAITLIST_COLLECTION}

# Admin API authentication
ADMIN_API_KEY=${answers.ADMIN_API_KEY}

# Email configuration
EMAIL_HOST=${answers.EMAIL_HOST}
EMAIL_PORT=${answers.EMAIL_PORT}
EMAIL_SECURE=${answers.EMAIL_SECURE === 'true'} # Convert string to boolean
EMAIL_USER=${answers.EMAIL_USER}
EMAIL_PASS=${encodedEmailPass}
EMAIL_FROM="Votigram Waitlist" <${answers.EMAIL_USER}> # Default FROM address

# This file was generated by setup-env.js
# Last updated: ${new Date().toISOString()}
`;

  fs.writeFileSync('.env', envContent);
  console.log('\x1b[32m%s\x1b[0m', '\n✅ Successfully created .env file!');
  console.log('\x1b[33m%s\x1b[0m', '⚠️  Make sure to add .env to your .gitignore file to keep your credentials secure.');
  console.log('\x1b[36m%s\x1b[0m', 'To deploy to Vercel, add these environment variables in the Vercel dashboard.\n');
  
  rl.close();
}

// Start the process
console.log('\x1b[1m%s\x1b[0m', 'Votigram Environment Setup\n');
console.log('This script will help you set up environment variables for your MongoDB connection.\n');
askQuestion(0); 